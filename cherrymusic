#! /bin/sh
### BEGIN INIT INFO
# Provides:           cherrymusic
# Required-Start:     $network $local_fs
# Required-Stop:      $local_fs
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  CherryMusic Server Daemon
# Description:        CherryMusic is a music streaming server based on CherryPy and jPlayer.
#                     It plays the music inside your PC, smartphone, tablet, toaster or 
#                     whatever device has a HTML5 compliant browser installed.
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="CherryMusic"
NAME=cherrymusic
DIR= # add path to the cherrymusic folder; must not end with /
DAEMON=$DIR/cherrymusic
PIDFILE=/var/run/$NAME.pid
LOGFILE=/var/log/$NAME/$NAME.log
SCRIPTNAME=/etc/init.d/$NAME
PYTHON=  #add python executable path

# Git
GIT=`which git`
GIT_URL=https://github.com/devsnd/cherrymusic.git
GIT_BRANCH=devel

# Extra
WGET=`which wget`
CURL=`which curl`

DAEMON_ARGS=""

# Permissions
USER= 
GROUP=


[ -x "$DAEMON" ] || exit 0

. /lib/init/vars.sh
. /lib/lsb/init-functions

do_start() {
    if [ -e $PIDFILE ]; then
        PID=`cat $PIDFILE`

        if ( ps -p $PID > /dev/null ); then
            log_failure_msg "$DESC '$NAME' is already running."
            return 1
        else
            rm -f $PIDFILE

            start-stop-daemon --start --background --chdir $DIR --chuid $USER:$GROUP --make-pidfile --pidfile $PIDFILE --no-close --exec $PYTHON $DAEMON --test > /dev/null || return 1
            start-stop-daemon --start --background --chdir $DIR --chuid $USER:$GROUP --make-pidfile --pidfile $PIDFILE --no-close --exec $PYTHON $DAEMON -- $DAEMON_ARGS >> $LOGFILE 2>&1 || return 2
        fi
    else
        start-stop-daemon --start --background --chdir $DIR --chuid $USER:$GROUP --make-pidfile --pidfile $PIDFILE --no-close --exec $PYTHON $DAEMON --test > /dev/null || return 1
        start-stop-daemon --start --background --chdir $DIR --chuid $USER:$GROUP --make-pidfile --pidfile $PIDFILE --no-close --exec $PYTHON $DAEMON -- $DAEMON_ARGS >> $LOGFILE 2>&1 || return 2
    fi
}

do_stop() {
    if [ -e $PIDFILE ]; then
        PID=`cat $PIDFILE`

        if ( ps -p $PID > /dev/null ); then
            start-stop-daemon --stop --retry 1 --signal 2 --quiet --pidfile $PIDFILE
            [ "$?" = 2 ] && return 2
        else
            log_failure_msg "$DESC '$NAME' is not running."
            rm -f $PIDFILE
            return 1
        fi
    else
        log_failure_msg "$DESC '$NAME' is not running."
        return 1
    fi
}

do_update() {
    if [ $? -le 1 ]; then
        #if [ -n $GIT -a -d "$DIR/.git" ]; then
            #$GIT --git-dir=$DIR/.git pull $GIT_URL $GIT_BRANCH && $GIT --git-dir=$DIR/.git reset --hard origin/$GIT_BRANCH || return 1
        if [ -n $WGET -o -n $CURL ]; then
            if [ -n $WGET ]; then
                $WGET --no-check-certificate ${GIT_URL%.git}/tarball/$GIT_BRANCH -O - | tar xz --strip-components=1 -C $DIR || return 1
            elif [ -n $CURL ]; then
                $CURL ${GIT_URL%.git}/tarball/$GIT_BRANCH -L -o - | tar xz --strip-components=1 -C $DIR || return 1
            fi
        else
            log_failure_msg "Update aborted. Please install either git, wget or curl."
            return 1
        fi
    else
        log_failure_msg "Update aborted, could not stop '$NAME'"
        return 1
    fi
}

case "$1" in
    start)
        log_daemon_msg "Starting $DESC..." "$NAME"
        do_start

        case "$?" in
            0|1) log_end_msg 0 ;;
            1) log_end_msg 1 ;;
        esac
    ;;
    stop)
        log_daemon_msg "Stopping $DESC..." "$NAME"
        do_stop

        case "$?" in
            0|1) log_end_msg 0 ;;
            2) log_end_msg 1 ;;
        esac
    ;;
    restart)
        log_daemon_msg "Restarting $DESC..." "$NAME"
        do_stop

        case "$?" in
            0|1)
                do_start

                case "$?" in
                    0) log_end_msg 0 ;;
                    *) log_end_msg 1 ;;
                esac
            ;;
            *)
                log_end_msg 1
            ;;
        esac
    ;;
    status)
        if [ -e $PIDFILE ]; then
            PID=`cat $PIDFILE`

            if ( ps -p $PID > /dev/null ); then
                log_success_msg "$DESC '$NAME' is running (pid $PID)."
                exit 0
            else
                log_failure_msg "$DESC '$NAME' is not running."
                rm -f $PIDFILE
                exit 1
            fi
        else
            log_failure_msg "$DESC '$NAME' is not running."
            exit 1
        fi
    ;;
    update)
        do_stop
        
        case "$?" in
            0|1)
                do_update

                case "$?" in
                    0) log_end_msg 0 ;;
                    *) log_end_msg 1 ;;
                esac
            ;;
            *)
                log_end_msg 1
            ;;
        esac
    ;;
    *)
        log_action_msg "Usage: $SCRIPTNAME {start|stop|restart|status|update}"
        exit 0
    ;;
esac
